#!/bin/bash
#------------------------------------------////
# FUNCTIONS:
#------------------------------------------////

mkdircd() {
    mkdir $1 && cd $1 || exit 1
}

createrepo() {
    curl -X POST -H "Authorization: token "$token"" -d  '{ "name": "'"$2"'"}' "https://api.github.com/orgs/"$1"/repos"
}

sync() {
    if [ -d .repo ]; then
        time repo sync -f -c --no-clone-bundle -j32 --no-tags $@
    else
        cd ${HOME}/$1; time repo sync -f -c --no-clone-bundle -j32 --no-tags
    fi
}

keygen() {
    ssh-keygen -t rsa -b 4096 -C $1
}

tlpmode() {
    batterystate=$(acpi | sed 's/^.*Discharging/Discharging/; s/Discharging.*/Discharging/')

    if [[ $batterystate = 'Discharging' ]]; then
      sudo tlp bat
    else
      sudo tlp ac
    fi

}

updategrub() {
    sudo grub-mkconfig -o /boot/grub/grub.cfg
}

genapplist() {
    comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
}

fm() {
    nautilus .
}

gapp() {
    ps aux | grep $1
}

updatebinsubmodule() {
    if [ -d $HOME/scripts/bin/$1 ]; then
        cd $HOME/scripts/bin/$1 && git pull
        cd $HOME/scripts && git submodule update
        git add -A; git commit -am "scripts: update ${1}"
    else
        echo "Submodule doesn't exist"
    fi
}

updatesubmodule() {
    if [ -d $pwd/.git ]; then
        cd $1 && git pull
        .. && git submodule update
    else
        echo "Submodule doesn't exist"
    fi
}
